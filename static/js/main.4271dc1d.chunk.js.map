{"version":3,"sources":["components/Mario.js","components/Mushroom.js","components/Board.js","components/capture.js","App.js","serviceWorker.js","index.js"],"names":["Mario","props","boardConfig","mushrooms","steps","takeStep","direction","intervalId","clearInterval","setInterval","setState","y_axis","state","x_axis","checkDirection","foundMushrooms","find","mushroom","x","y","remaining","eatMushroom","e","keyCode","toDirection","bottomLimit","verticalBlocks","horizontalBlocks","window","onkeydown","this","console","log","styles","height","cellHeight","width","cellWidth","marginTop","marginLeft","className","style","Component","Mushroom","Board","totalMushrooms","Math","round","Number","foundMushroom","updatedMushrooms","key","score","alert","getRandom","min","max","floor","random","i","push","filter","map","Capture","w","h","prompt","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4271dc1d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Mario extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      y_axis: 1,\r\n      x_axis: 1,\r\n    };\r\n  }\r\n\r\n  boardConfig = this.props.boardConfig;\r\n  mushrooms = this.props.mushrooms;\r\n  steps = 0;\r\n\r\n  takeStep = (direction) => {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n    this.intervalId = setInterval(() => {\r\n      switch (direction) {\r\n        case 37:\r\n          this.setState({\r\n            y_axis: this.state.y_axis,\r\n            x_axis: this.state.x_axis - 1,\r\n          });\r\n          this.checkDirection(direction);\r\n          break;\r\n        case 38:\r\n          this.setState({\r\n            y_axis: this.state.y_axis - 1,\r\n            x_axis: this.state.x_axis,\r\n          });\r\n          this.checkDirection(direction);\r\n          break;\r\n        case 39:\r\n          this.setState({\r\n            y_axis: this.state.y_axis,\r\n            x_axis: this.state.x_axis + 1,\r\n          });\r\n          this.checkDirection(direction);\r\n          break;\r\n        case 40:\r\n          this.setState({\r\n            y_axis: this.state.y_axis + 1,\r\n            x_axis: this.state.x_axis,\r\n          });\r\n          this.checkDirection(direction);\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n      clearInterval(this.intervalId);\r\n    }, 2);\r\n\r\n    const foundMushrooms = this.props.mushrooms.find(\r\n      (mushroom) =>\r\n        mushroom.x === this.state.x_axis &&\r\n        mushroom.y === this.state.y_axis &&\r\n        mushroom.remaining\r\n    );\r\n    if (foundMushrooms) {\r\n      this.props.eatMushroom(foundMushrooms);\r\n    }\r\n  };\r\n\r\n  checkDirection = (e) => {\r\n    if (e.keyCode) {\r\n      this.steps += 1;\r\n    }\r\n    const toDirection = e.keyCode || e;\r\n    const { x_axis, y_axis } = this.state;\r\n    const bottomLimit = this.boardConfig.verticalBlocks - 1;\r\n    const rightLimit = this.boardConfig.horizontalBlocks - 1;\r\n\r\n    if (!((x_axis > rightLimit - 1 && toDirection === 39) || (y_axis > bottomLimit - 1 && toDirection === 40)||(y_axis < 1 && toDirection === 38) || (x_axis < 1 && toDirection === 37))){\r\n      // console.log(x_axis + \"__\" + y_axis)\r\n      // console.log(rightLimit+\"_limit_\"+bottomLimit)\r\n      // console.log(\"to direction\"+toDirection)\r\n      // console.log((y_axis > bottomLimit - 1 && toDirection === 40))\r\n      this.takeStep(toDirection);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.onkeydown = this.checkDirection;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"interval\"+this.intervalId)\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      height: this.boardConfig.cellHeight + \"px\",\r\n      width: this.boardConfig.cellWidth + \"px\",\r\n      marginTop: this.state.y_axis * this.boardConfig.cellHeight + \"px\",\r\n      marginLeft: this.state.x_axis * this.boardConfig.cellWidth + \"px\",\r\n    };\r\n    return (\r\n      <div>\r\n        <div className=\"game mario\" style={styles} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mario;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Mushroom extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x: this.props.x,\r\n      y: this.props.y,\r\n      cellWidth: this.props.cellWidth,\r\n      cellHeight: this.props.cellHeight,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      width: this.state.cellWidth + \"px\",\r\n      height: this.state.cellHeight + \"px\",\r\n      marginLeft: this.state.x * this.state.cellWidth + \"px\",\r\n      marginTop: this.state.y * this.state.cellHeight + \"px\",\r\n    };\r\n    return (\r\n      <div>\r\n        <div className=\"game mushroom\" style={styles} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mushroom;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Mario from \"./Mario.js\";\r\nimport Mushroom from \"./Mushroom.js\";\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cellWidth: 30,\r\n      cellHeight: 30,\r\n      mushrooms: [],\r\n      score: 0\r\n    };\r\n\r\n    const getRandom = (min, max) =>\r\n      Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n    const horizontalBlocks = this.props.horizontalBlocks;\r\n    const verticalBlocks = this.props.verticalBlocks;\r\n\r\n    for (let i = 0; i < this.totalMushrooms; i++) {\r\n        console.log(\"total\"+this.totalMushrooms)\r\n      this.state.mushrooms.push({\r\n        key: i,\r\n        x: getRandom(0, horizontalBlocks - 1),\r\n        y: getRandom(0, verticalBlocks - 1),\r\n        remaining: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  totalMushrooms = Math.round(\r\n    (Number(this.props.horizontalBlocks) + Number(this.props.verticalBlocks)) / 2\r\n  );\r\n\r\n  eatMushroom = (foundMushroom) => {\r\n    const updatedMushrooms = [...this.state.mushrooms];\r\n    updatedMushrooms[foundMushroom.key].remaining = false;\r\n    this.setState({\r\n      mushrooms: updatedMushrooms,\r\n      score: this.state.score + 1,\r\n    });\r\n\r\n    if (this.totalMushrooms === this.state.score) {\r\n      console.log(\"completed!\")\r\n      alert(\"You ate all mashrooms\")\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const styles = {\r\n      width: this.props.horizontalBlocks * this.state.cellWidth + \"px\",\r\n      height: this.props.verticalBlocks * this.state.cellHeight + \"px\",\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board\" style={styles}>\r\n          <Mario\r\n            boardConfig={{\r\n              cellWidth: this.state.cellWidth,\r\n              cellHeight: this.state.cellHeight,\r\n              horizontalBlocks: this.props.horizontalBlocks,\r\n              verticalBlocks: this.props.verticalBlocks,\r\n            }}\r\n            mushrooms={this.state.mushrooms}\r\n            eatMushroom={this.eatMushroom}\r\n          />\r\n          {this.state.mushrooms\r\n            .filter((mushroom) => {\r\n              return mushroom.remaining;\r\n            })\r\n            .map((mushroom) => {\r\n              return (\r\n                <Mushroom\r\n                  key={mushroom.key}\r\n                  x={mushroom.x}\r\n                  y={mushroom.y}\r\n                  cellWidth={this.state.cellWidth}\r\n                  cellHeight={this.state.cellHeight}\r\n                />\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react'\r\nimport Board from './Board'\r\n\r\nfunction Capture(){\r\n    let h = prompt(\"enter height\")\r\n    let w\r\n    if(h){\r\n    w = prompt(\"enter width\")\r\n    }\r\n    return <Board horizontalBlocks = {h} verticalBlocks = {w}/>\r\n    }\r\n\r\nexport default Capture","import React from 'react';\nimport './App.css';\nimport Capture from './components/capture'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Capture />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}